@0xdbbcd8ccbd223b6c; # unique file ID, generated by `capnp id`

struct AssetUuid {
    id @0 :Data;
}

struct AssetUuidList {
    list @0 :List(AssetUuid);
}

struct KeyValue {
  key @0 :Data;
  value @1 :Data;
}

enum FileType {
  file @0;
  directory @1;
  symlink @2;
  none @3;
}

enum FileState {
  exists @0;
  deleted @1;
}

enum AssetSource {
  file @0;
}

struct DirtyFileInfo {
  state @0 :FileState;
  sourceInfo @1 :SourceFileInfo;
}

struct SourceFileInfo {
  type @0 :FileType;
  lastModified @1 :UInt64;
  length @2 :UInt64;
}

struct RenameFileEvent {
  src @0 :Data;
  dst @1 :Data;
}

struct AssetUuidPair {
  key @0 :AssetUuid;
  value @1 :AssetUuid;
}

struct SourceMetadata {
  assets @0 :List(AssetUuid);
  importerVersion @1 :UInt32;
  importerOptionsType @2 :Data;
  importerOptions @3 :Data;
  importerStateType @4 :Data;
  importerState @5 :Data;
  buildPipelines @6 :List(AssetUuidPair);
}

struct ImportError {
  text @0 :Text;
}

# The identifier for an import artifact is the hash of 
# - Source asset contents
# - Source metadata contents
# - Importer version/id
struct ImportArtifactKey {
  hash @0 :Data;
}

struct AssetMetadata {
  id @0 :AssetUuid;
  loadDeps @1 :List(AssetUuid);
  buildDeps @2 :List(AssetUuid);
  instantiateDeps @3 :List(AssetUuid);
  searchTags @4 :List(KeyValue);
  buildPipeline @5 :AssetUuid;
  # The most recently recorded hash of the input to the import function
  latestArtifact :union {
    id @6 :ImportArtifactKey;
    none @7 :Void;
  }
  # The source of the imported asset
  source @8 :AssetSource;
}

# The identifier for a build artifact is the hash of 
# - Import artifact hash
# - Build parameters (target platform etc)
# - Build pipeline hash

# The identifier of an import artifact is the hash of 
# - Source file
# - Importer version
# - Importer TypeUUID
# - Importer state
# - Importer state TypeUUID
# - Importer options
# - Importer options TypeUUID

struct Artifact {
    assetId @0 :AssetUuid;
    key @1 :Data;
    data @2 :SerializedAsset;
}

struct BuildParameters {

}

struct AssetChangeLogEntry {
  num @0 :UInt64;
  event @1 :AssetChangeEvent;
}
struct AssetChangeEvent {
  union {
    contentUpdateEvent @0 :AssetContentUpdateEvent;
    removeEvent @1 :AssetRemoveEvent;
  }
}

struct AssetContentUpdateEvent {
    id @0 :AssetUuid;
    importHash @1 :ImportArtifactKey;
    # `buildDepHash` is the hash of all build dependencies' import hashes sorted by their AssetUUID.
    # It can be used to determine if a build artifact needs to be invalidated
    # by hashing (import_hash, build_dep_hash, build_pipeline_hash, build_parameters)
    buildDepHash @2 :Data;
}

struct AssetRemoveEvent {
    id @0 :AssetUuid;
}

enum CompressionType {
  none @0;
  lz4 @1;
}

struct SerializedAsset {
  compression @0 :CompressionType;
  uncompressedSize @1 :UInt64;
  typeUuid @2 :Data;
  data @3 :Data;
}